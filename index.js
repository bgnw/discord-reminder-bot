const colors = require('colors');console.log("----  APPLICATION START  ----".bold.cyan);const Discord = require('discord.js');const WOKCommands = require('wokcommands');const config = require('./config.json');const client = new Discord.Client();const dbConn = require('./db/dbconn');const logHandler = require('./logs/logHandler');client.on("ready", () => {    new WOKCommands(client, {        commandsDir: 'commands',        showWarns: false    })    const checkReminders = async () => {        await dbConn.query("SELECT * FROM reminders_bot__scheduled_reminders WHERE timestamp <= CAST(? AS DATETIME)",            [(new Date()).toISOString().slice(0, -1)],            function (err, results) {                if (err) {                    logHandler.logMessage("DB SELECT query error: " + err, 'ERROR');                    return;                }                /// PROCESS AND SEND MESSAGES THAT ARE TO BE SENT NOW:                const backlog = JSON.parse(JSON.stringify(results));                logHandler.logMessage(backlog.length + " messages to process", 'INFO')                for (const key of Object.keys(backlog)) {                    let rem = backlog[key];                    const sendMsg = async () => {                        //get guild (server) entity                        const guild = await client.guilds.fetch(rem.guildID);                        if (!guild)                            return; // if server no longer exists (or no access) go to next reminder                        // get channel entity                        const channel = guild.channels.cache.get(rem.channelID);                        if (!channel)                            return; // if channel no longer exists (or no access) go to next reminder                        // send scheduled reminder message to specified channel                        channel.send(                            (rem.mentionableRoleID == null ? "" : "<@&" + rem.mentionableRoleID + ">:\n") +                            (rem.title == null ? "" : "**"+rem.title+"**\n") +                            rem.body                        );                        dbConn.query("DELETE FROM reminders_bot__scheduled_reminders WHERE reminderID = ?",                            rem.reminderID,                            function (err) {                                if (err) {                                    throw("FATAL ERROR, unable to remove messages from backlog, potential infinite loop." +                                        "\nDetails: " + err);                                }                            });                    }                    sendMsg();                }            }        );        setTimeout(checkReminders, 1000 * 30);    }    checkReminders();});client.login(config.DISCORD_BOT_TOKEN);